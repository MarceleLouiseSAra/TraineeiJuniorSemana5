// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id_User        Int              @id @default(autoincrement())
  username       String
  email          String           @unique
  password       String
  admin          Boolean
  profilePic     String?
  created_at     DateTime?        @default(now())
  MusicsOnUsers  MusicsOnUsers[]
  AlbumsOnUsers  AlbumsOnUsers[]
  ArtistsOnUsers ArtistsOnUsers[]
}

model Artist {
  id_Artist  Int      @id @default(autoincrement())
  username   String
  streams    Int
  profilePic String?
  joined_in  DateTime @default(now())

  album          Album[]
  music          Music[]
  ArtistsOnUsers ArtistsOnUsers?
}

model Album {
  id_Album    Int      @id @default(autoincrement())
  title       String
  genre       String
  coverPic    String?
  released_at DateTime @default(now())

  artistId      Int
  artist        Artist         @relation(fields: [artistId], references: [id_Artist])
  music         Music[]
  AlbumsOnUsers AlbumsOnUsers?
}

model Music {
  id_Music    Int      @id @default(autoincrement())
  title       String
  genre       String
  coverPic    String?
  released_at DateTime @default(now())

  albumId       Int
  album         Album          @relation(fields: [albumId], references: [id_Album])
  artistId      Int
  artist        Artist         @relation(fields: [artistId], references: [id_Artist])
  MusicsOnUsers MusicsOnUsers?
}

// explicit many-to-many relations:

model MusicsOnUsers {
  userId  Int   @unique
  user    User  @relation(fields: [userId], references: [id_User])
  musicId Int   @unique
  music   Music @relation(fields: [musicId], references: [id_Music])

  @@id([userId, musicId])
}

model AlbumsOnUsers {
  userId  Int   @unique
  user    User  @relation(fields: [userId], references: [id_User])
  albumId Int   @unique
  album   Album @relation(fields: [albumId], references: [id_Album])

  @@id([userId, albumId])
}

model ArtistsOnUsers {
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id_User])
  artistId Int    @unique
  artist   Artist @relation(fields: [artistId], references: [id_Artist])

  @@id([userId, artistId])
}
